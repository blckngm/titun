# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- staging
- trying

pr: none

jobs:
# Check formatting
- job: rustfmt
  displayName: Check foramtting
  pool:
    vmImage: ubuntu-16.04
  steps:
    - template: ci/azure-install-rust.yml
      parameters:
        rust_version: beta
    - script: |
        rustup component add rustfmt &&
        cargo fmt --version
      displayName: Install rustfmt
    - script: |
        cargo fmt --all -- --check &&
        cd fuzz && cargo fmt -- --check
      displayName: Check formatting

- job: test
  displayName: Test
  pool:
    vmImage: ubuntu-16.04
  steps:
    - template: ci/azure-install-rust.yml
      parameters:
        rust_version: beta
    - script: cargo test --locked --all -- --nocapture
      displayName: Run tests
    - script: cargo test --benches --locked --all
      displayName: Run benches as tests
    - script: cd fuzz && cargo check --locked
      displayName: Check fuzz

- job: windows_test
  displayName: Test on Windows
  pool:
    vmImage: vs2017-win2016
  steps:
    - template: ci/azure-install-rust.yml
      parameters:
        rust_version: beta
    - script: cargo test --locked --all -- --nocapture
      displayName: Run tests
    - script: cargo test --benches --locked --all
      displayName: Run benches as tests

# TODO: x86 build
- job: windows_gui
  displayName: Build Windows GUI Installer
  pool:
    vmImage: vs2017-win2016
  steps:
    - task: NuGetCommand@2
      inputs:
        solution: titun-windows-gui/titun-windows-gui.sln
        command: restore
    - task: MSBuild@1
      inputs:
        solution: titun-windows-gui/titun-windows-gui.sln
        configuration: release
    - template: ci/azure-install-rust.yml
      parameters:
        rust_version: beta
    - script: cargo build --release
      displayName: Build TiTun
    - bash: |
        cp target/release/titun.exe titun-windows-gui/titun.exe &&
        iscc titun-windows-gui/installer/titun.iss
      displayName: Build Installer
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: titun-windows-gui\installer\Output\
        artifactName: installer

- job: integration_test
  displayName: Integration Test
  pool:
    vmImage: ubuntu-16.04
  steps:
    - template: ci/azure-install-rust.yml
      parameters:
        rust_version: beta
    - script: |
        cargo build &&
        sudo cp target/debug/titun /usr/local/bin &&
        cd ns-test &&
        sudo ./smoke.sh
      displayName: Integration tests

- job: cross_test_aarch64
  displayName: Cross test for aarch64
  pool:
    vmImage: ubuntu-16.04
  steps:
    - template: ci/azure-install-rust.yml
      parameters:
        rust_version: beta
    - script: |
        rustup target add aarch64-unknown-linux-gnu &&
        sudo apt-get install -yqq gcc-aarch64-linux-gnu qemu-user-static &&
        export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc &&
        export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_RUNNER='qemu-aarch64-static -L /usr/aarch64-linux-gnu' &&
        cargo test --target aarch64-unknown-linux-gnu --locked --all
      displayName: Run tests

- job: cross_check_freebsd
  displayName: Cross check for freebsd
  pool:
    vmImage: ubuntu-16.04
  steps:
    - template: ci/azure-install-rust.yml
      parameters:
        rust_version: beta
    - script: |
        rustup target add x86_64-unknown-freebsd &&
        cargo check --target x86_64-unknown-freebsd --locked --all --tests
      displayName: Check
