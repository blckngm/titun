# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- staging
- trying

pr: none

jobs:
# Check formatting
- job: rustfmt
  displayName: Check foramtting
  pool:
    vmImage: ubuntu-20.04
  steps:
    - template: ci/azure-install-rust.yml
      parameters:
        rust_version: stable
    - script: |
        set -ex
        rustup component add rustfmt
        cargo fmt --version
      displayName: Install rustfmt
    - script: |
        set -ex
        cargo fmt --all -- --check
        cd fuzz && cargo fmt -- --check
      displayName: Check formatting
    - script: cargo run --example check-copyright
      displayName: Check copyright headers

# Speed up CI by running clippy in its own jobs.
- job: clippy
  displayName: clippy
  pool:
    vmImage: ubuntu-20.04
  steps:
    - template: ci/azure-install-rust.yml
      parameters:
        rust_version: stable
    - script: |
        rustup component add clippy &&
        cargo clippy --all-targets -- -D clippy::all
      displayName: Run clippy

- job: test
  displayName: Test
  pool:
    vmImage: ubuntu-20.04
  variables:
    # Use kcov to collect coverage.
    RUSTFLAGS: -Clink-dead-code -D warnings
    # CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER: sudo -E kcov --verify --include-pattern=titun/src coverage
    CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER: sudo -E
  steps:
    - template: ci/azure-install-rust.yml
      parameters:
        rust_version: stable
    - script: |
        set -ex
        sudo apt-get update
        sudo apt-get install -yqq wireguard net-tools
      displayName: Install WireGuard Kernel Module and Tools
    # - script: |
    #     set -ex
    #     sudo apt-get install -yqq libcurl4-openssl-dev libelf-dev libdw-dev cmake gcc binutils-dev libiberty-dev
    #     wget https://github.com/SimonKagstrom/kcov/archive/master.tar.gz
    #     tar xzf master.tar.gz
    #     cd kcov-master
    #     mkdir build
    #     cd build
    #     cmake ..
    #     make
    #     sudo make install
    #     cd ../..
    #     rm -rf kcov-master
    #   displayName: Install kcov
    - script: cargo test --lib --benches --locked --features=sudo-tests
      displayName: Run tests
    - script: |
        set -ex
        cargo build
        cd ns-test
        sudo ./integration-test.sh
        sudo ./interop-test.sh
      displayName: Run Integration Test
    # - script: bash <(curl -s https://codecov.io/bash)
    #   displayName: Upload code coverage info to codecov.io

- job: windows_clippy
  displayName: Clippy on Windows
  pool:
    vmImage: windows-2019
  steps:
    - template: ci/azure-install-rust.yml
      parameters:
        rust_version: stable-x86_64-pc-windows-msvc
    - bash: |
        rustup component add clippy &&
        cargo clippy --all-targets -- -D clippy::all
      displayName: Run clippy

- job: windows_test
  displayName: Test on Windows
  variables:
    # Deny warnings
    RUSTFLAGS: -D warnings
  pool:
    vmImage: windows-2019
  steps:
    - template: ci/azure-install-rust.yml
      parameters:
        rust_version: stable-x86_64-pc-windows-msvc
    - script: cargo test --lib --benches --locked
      displayName: Run tests

- job: windows_gui
  displayName: Build Windows GUI Installer
  pool:
    vmImage: windows-2019
  variables:
    RUSTFLAGS: -C target-feature=+crt-static,+fast-variable-shuffle
  steps:
    - template: ci/azure-install-rust.yml
      parameters:
        rust_version: stable-x86_64-pc-windows-msvc
    - script: cd windows-gui-client && yarn && yarn build
      displayName: Build Html
    - script: cargo build --release
      displayName: Build TiTun
    - task: MSBuild@1
      inputs:
        solution: windows-gui-installer/titun-windows-gui-installer.sln
        platform: x64
        configuration: release
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: windows-gui-installer/installer/bin/Release/titun.msi
        artifactName: titun-installer

- job: windows_gui_x86
  displayName: Build Windows GUI Installer (x86)
  pool:
    vmImage: windows-2019
  variables:
    RUSTFLAGS: -C target-feature=+crt-static,+fast-variable-shuffle
  steps:
    - template: ci/azure-install-rust.yml
      parameters:
        rust_version: stable-i686-pc-windows-msvc
    - script: cd windows-gui-client && yarn && yarn build
      displayName: Build Html
    - script: cargo build --release
      displayName: Build TiTun
    - task: MSBuild@1
      inputs:
        solution: windows-gui-installer/titun-windows-gui-installer.sln
        platform: x86
        configuration: release
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: windows-gui-installer/installer/bin/Release/titun.msi
        artifactName: titun-installer-x86

- job: check_fuzz
  displayName: Check Fuzz
  pool:
    vmImage: ubuntu-20.04
  steps:
    - template: ci/azure-install-rust.yml
      parameters:
        rust_version: stable
    - script: cd fuzz && cargo check --locked
      displayName: Check fuzz

- job: cross_test_aarch64
  displayName: Cross test for aarch64
  variables:
    # Deny warnings
    RUSTFLAGS: -D warnings
  pool:
    vmImage: ubuntu-20.04
  steps:
    - template: ci/azure-install-rust.yml
      parameters:
        rust_version: stable
    - script: |
        set -ex
        rustup target add aarch64-unknown-linux-gnu
        sudo apt-get update
        sudo apt-get install -yqq gcc-aarch64-linux-gnu qemu-user-static
        cargo test --locked --target aarch64-unknown-linux-gnu
      env:
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_RUNNER: qemu-aarch64-static -L /usr/aarch64-linux-gnu
      displayName: Run tests

- job: cross_test_mipsel
  displayName: Cross test for mipsel
  variables:
    # Deny warnings
    RUSTFLAGS: -D warnings
  pool:
    vmImage: ubuntu-20.04
  steps:
    - template: ci/azure-install-rust.yml
      parameters:
        rust_version: stable
    - script: |
        set -ex
        rustup target add mipsel-unknown-linux-gnu
        sudo apt-get update
        sudo apt-get install -yqq gcc-mipsel-linux-gnu qemu-user-static
        cargo test --locked --target mipsel-unknown-linux-gnu
      env:
        CARGO_TARGET_MIPSEL_UNKNOWN_LINUX_GNU_LINKER: mipsel-linux-gnu-gcc
        CARGO_TARGET_MIPSEL_UNKNOWN_LINUX_GNU_RUNNER: qemu-mipsel-static -L /usr/mipsel-linux-gnu
      displayName: Run tests

- job: cross_check_freebsd
  displayName: Cross check for freebsd
  variables:
    # Deny warnings
    RUSTFLAGS: -D warnings
  pool:
    vmImage: ubuntu-20.04
  steps:
    - template: ci/azure-install-rust.yml
      parameters:
        rust_version: stable
    - script: |
        set -ex
        rustup target add x86_64-unknown-freebsd
        cargo check --locked --all-targets --target x86_64-unknown-freebsd
      displayName: Check
