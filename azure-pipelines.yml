# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- staging
- trying

pr: none

jobs:
# Check formatting
- job: rustfmt
  displayName: Check foramtting
  pool:
    vmImage: ubuntu-16.04
  steps:
    - template: ci/azure-install-rust.yml
      parameters:
        rust_version: beta
    - script: |
        set -ex
        rustup component add rustfmt
        cargo fmt --version
      displayName: Install rustfmt
    - script: |
        set -ex
        cargo fmt --all -- --check
        cd fuzz && cargo fmt -- --check
      displayName: Check formatting
    - script: cargo run --example check-copyright
      displayName: Check copyright headers

- job: test
  displayName: Test
  pool:
    vmImage: ubuntu-16.04
  variables:
    # Use kcov to collect coverage.
    RUSTFLAGS: -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code
    CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER: sudo -E kcov --verify --exclude-pattern=/usr/lib,/.cargo,patched/ring coverage
  steps:
    - template: ci/azure-install-rust.yml
      parameters:
        rust_version: beta
    - script: |
        set -ex
        sudo apt-add-repository -y ppa:wireguard/wireguard
        sudo apt-get update
        sudo apt-get install -yqq wireguard-dkms wireguard-tools
      displayName: Install WireGuard DKMS and Tools
    - script: |
        set -ex
        sudo apt-get install -yqq libcurl4-openssl-dev libelf-dev libdw-dev cmake gcc binutils-dev libiberty-dev
        wget https://github.com/SimonKagstrom/kcov/archive/master.tar.gz
        tar xzf master.tar.gz
        cd kcov-master
        mkdir build
        cd build
        cmake ..
        make
        sudo make install
        cd ../..
        rm -rf kcov-master
      displayName: Install kcov
    - script: cargo test --locked --all --features=sudo-tests
      displayName: Run tests
    - script: cargo test --locked --all --benches
      displayName: Run benches as tests
    - script: |
        set -ex
        cargo build
        cd ns-test
        sudo ./integration-test.sh
        sudo ./interop-test.sh
      displayName: Run Integration Test
    - script: bash <(curl -s https://codecov.io/bash)
      displayName: Upload code coverage info to codecov.io

- job: windows_test
  displayName: Test on Windows
  pool:
    vmImage: vs2017-win2016
  steps:
    - template: ci/azure-install-rust.yml
      parameters:
        rust_version: beta
    - script: cargo test --locked --all -- --nocapture
      displayName: Run tests
    - script: cargo test --benches --locked --all
      displayName: Run benches as tests

# TODO: x86 build
- job: windows_gui
  displayName: Build Windows GUI Installer
  pool:
    vmImage: vs2017-win2016
  steps:
    - task: NuGetCommand@2
      inputs:
        solution: titun-windows-gui/titun-windows-gui.sln
        command: restore
    - task: MSBuild@1
      inputs:
        solution: titun-windows-gui/titun-windows-gui.sln
        configuration: release
    - template: ci/azure-install-rust.yml
      parameters:
        rust_version: beta
    - script: cargo build --release
      displayName: Build TiTun
    - bash: |
        set -ex
        cp target/release/titun.exe titun-windows-gui/titun.exe
        iscc titun-windows-gui/installer/titun.iss
      displayName: Build Installer
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: titun-windows-gui\installer\Output\titun-setup.exe
        artifactName: titun-setup.exe

- job: check_fuzz
  displayName: Check Fuzz
  pool:
    vmImage: ubuntu-16.04
  steps:
    - template: ci/azure-install-rust.yml
      parameters:
        rust_version: beta
    - script: cd fuzz && cargo check --locked
      displayName: Check fuzz

- job: cross_test_aarch64
  displayName: Cross test for aarch64
  pool:
    vmImage: ubuntu-16.04
  steps:
    - template: ci/azure-install-rust.yml
      parameters:
        rust_version: beta
    - script: |
        set -ex
        rustup target add aarch64-unknown-linux-gnu
        sudo apt-get install -yqq gcc-aarch64-linux-gnu qemu-user-static
        cargo test --target aarch64-unknown-linux-gnu --locked --all
      env:
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_RUNNER: qemu-aarch64-static -L /usr/aarch64-linux-gnu
      displayName: Run tests

- job: cross_check_freebsd
  displayName: Cross check for freebsd
  pool:
    vmImage: ubuntu-16.04
  steps:
    - template: ci/azure-install-rust.yml
      parameters:
        rust_version: beta
    - script: |
        set -ex
        rustup target add x86_64-unknown-freebsd
        cargo check --target x86_64-unknown-freebsd --locked --all --tests
      displayName: Check
