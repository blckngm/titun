name: CI

on:
  push:
    branches:
      - trying
      - staging

jobs:
  test:
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: 1.54.0
        profile: minimal
        components: rustfmt, clippy

    - uses: actions/setup-node@v2
      if: matrix.os == 'windows-latest'
      with:
        node-version: '16'

    - name: Test
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
      env:
        CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER: sudo -E
        CARGO_TARGET_X86_64_APPLE_DARWIN_RUNNER: sudo -E
        RUSTFLAGS: -D warnings
      run: cargo test --all --all-targets --all-features --locked

    - name: Integration Test
      if: matrix.os == 'ubuntu-latest'
      run: |
        set -ex
        sudo apt-get update
        sudo apt-get install -yqq wireguard net-tools
        cargo build
        cd ns-test
        sudo ./integration-test.sh
        sudo ./interop-test.sh

    - name: Test
      if: matrix.os == 'windows-latest'
      shell: bash
      env:
        RUSTFLAGS: -D warnings
        TESTING: 1
      run: |
        set -ex
        cd windows-gui-client && yarn && yarn build && cd ..
        cargo test --all --all-targets --locked

    - name: Check Fuzz
      if: matrix.os == 'ubuntu-latest'
      run: cd fuzz && cargo check --locked

    - name: Fmt check
      if: matrix.os == 'macos-latest'
      run: |
        set -ex
        cargo fmt --all -- --check
        cargo run --example check-copyright
        cd fuzz && cargo fmt -- --check

    - name: Clippy
      run: cargo clippy --all --all-targets -- -D clippy::all
